extends layout

block headercontent
	link(rel="stylesheet",href="/css/plugin/xjtree.css",media="screen",type="text/css")
	style.
		body {
			padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
		}
		.tree_container{
			border:solid 1px #ccc;
			padding:5px 10px;
			background-color: #FEFEFE;
			height:250px;
			overflow:auto;
		}
		.codep{
			padding:5px;
		}
		.toolbar{
			margin-top:5px;
			padding:2px 4px;
			overflow:hidden;
		}
		.toolbar label
		{
			width:120px;
			float:left;
		}
		.toolbar label input[type="radio"]{
			margin-right:3px;
			margin-bottom:5px;
		}
		.toolbar button
		{
			margin:2px 5px;
		}
		.ico-home .xe-tree-node-icon
		{
			background-image: url("/img/icon/home.png");
		}
		.ico-config .xe-tree-node-icon
		{
			background-image: url("/img/icon/config.png");
		}
		.ico-user .xe-tree-node-icon
		{
			background-image: url("/img/icon/user.png");
		}
block content
	h3 树控件（xjTree）使用样例
	div
		div.alert.alert-info 
			| 调用xjTree之前需要在页面上引入对应的样式和脚本，因为xjTree依赖jquery，所以你还需额外引入jquery,
			| xjTree支持动态加载数据和一次加载全部数据，性能非常优秀，
			a(href="bigxjtree") 查看大数据示例
		div.codep
			code
				|&lt;link rel="stylesheet" href="css/plugin/xjtree.css" type="text/css"&gt;
		div.codep
			code
				|&lt;script src="js/plugin/xjTree.js" type="text/javascript"&gt;&lt;/script&gt;
	h5 1. 一次加载所有数据，不涉及服务端，以下代码生成两层的树形数据
	div.row-fluid
		div.span8			
			pre
				code					
					|function generateChildNodes(id,text,hasChild,classes,pitem,count)
					|{
					|	for(var i=0,l=10;i&lt;l;i++)
					|	{
					|		var item = {id:id+i,"text":text+i,"hasChildren":hasChild,"classes":classes,"ChildNodes":[],"complete":true};
					|		if(hasChild)
					|		{
					|			generateChildNodes(item.id,"生成的子节点",false,"",item.ChildNodes,10);
					|		}
					|		pitem.push(item);
					|	}
					|}
					|var treedata1 = [];	
					|generateChildNodes("t1","生成的分组",true,"",treedata1,10);	//生成数据，只生成两层
					|var option1 = { 
					|	data: treedata1, //初次加载的数据源
					|	theme:"xe-tree-arrows", //配置默认主题
					|	onnodeclick: function(node){node.expand();}  //点击节点展开树
					|}; //树插件的参数配置
					|new xjTree("tree1",option1); //什么xjTree插件
		div.span4
			div#tree1.tree_container			
			div.toolbar.alert.alert-info
				div.tip 自带的三种风格主题，点击切换
				label.radiobox.inline
					input(type="radio",name="tree1_changetheme",value="xe-tree-arrows",checked)
					|xe-tree-arrows
				label.radiobox.inline
					input(type="radio",name="tree1_changetheme",value="xe-tree-lines")
					|xe-tree-lines
				label.radiobox.inline
					input(type="radio",name="tree1_changetheme",value="xe-tree-no-lines")
					|xe-tree-no-lines	
	h5 2. 先加载一层然后异步加载节点，对于大数据量的树 非常合适
	div.row-fluid
		div.span8
			div.alert.alert-info 自定义节点图标,使用节点属性 :
				code classes:"ico-home"	
				| 然后设置自定义的图标即可
			pre 
				code
					|.ico-home .xe-tree-node-icon
					|{
					|	background-image: url("/img/icon/home.png");
					|}			
			div.alert.alert-info 客户端调用代码如下：
			pre
				code					
					|var treedata2=[
					|	{id:"root0","text":"根节点1","hasChildren":true,"classes":"ico-home","ChildNodes":[],"complete":false},
					|	{id:"root1","text":"根节点2-无图标","hasChildren":true,"classes":"xe-tree-noicon","ChildNodes":[],"complete":false},
					|	{id:"root2","text":"根节点3-没子节点","hasChildren":false,"classes":"ico-config","ChildNodes":[]}
					|];
					|var option2 ={
					|	data: treedata2,
					|	url:"/sample/querytree1", // 异步获取的需要配置一个URL，插件在需要数据时自动
					|	theme:"xe-tree-arrows", 
					|	onnodeclick: function(node){node.expand();} 
					|};
					|new xjTree("tree2",option2);
			div.alert.alert-info 
				| 服务端相应代码 （Nodejs Express 框架） ，无关服务端语言 主要是能够根据提交的父节点ID获取数据并返回正确的json字符串就可以了具体格式请参考  
				a(href="#") Api
				|  . 
			pre
				code
					|exports.doquerytree = function(req, res){ //处理请求的函数
					|   var pid = req.body.id ; //从request.form 中获取id 即父节点的ID
					|   var ptext = decodeURIComponent(req.body.text);  //从request.form 中获取text 即父节点的文本
					|   //生成子节点，这里只把第一个节点设置成有子节点，
					|   //实际情况可能这里需要去获取真正的数据源，如查询数据库等
					|   var nodes = [];
					|   for (var i =0; i &lt; 10; i++) {
					|   	   var item = {id:pid+"_"+i,"text":pid+"子节点."+(i+1),"hasChildren":i==0,"classes":"","ChildNodes":[]};
					|   	   nodes.push(item);
					|   };
					|   res.json(nodes); //返回json格式的数据
					|};
		div.span4	
			div#tree2.tree_container
	h5 3. 带checkbox的的Tree

	div.row-fluid
		div.span8
			div.alert.alert-info 
				| 有时候我们需要xJTree显示checkbox，比如在选择部门 ，选择人员 ，选择其他一些东西，
				| 要在xjTree上显示checkbox 需要在声明树的时候设置属性：
				code showcheck:true 
				| ，同时在需要显示checkbox的每个节点数据上设置属性：
				code showcheck:true 
				|，两处默认都为 
				code false
				| 。 xjTree 的 checkbox 是三个状态的 选中、半选中、非选中； 
				| 其中半选中表示在级联选择模式下 其本身没有被选中，且子节点中有节点被选中，但并非全部的情况。
			pre
				code
					|var treedata3=[
					|{id:"dept1","text":"信息管理部","hasChildren":true,isexpand:true,showcheck:true,"classes":"","ChildNodes":[
					|	{id:"user1","text":"刘德华","hasChildren":false,showcheck:true,"classes":"ico-user"},
					|	{id:"user2","text":"黎明","hasChildren":false,showcheck:true,"classes":"ico-user"}
					|],"complete":true},
					|{id:"dept2","text":"财务部","hasChildren":true,showcheck:true,isexpand:true,"classes":"","ChildNodes":[
					|	{id:"user3","text":"郭富城","hasChildren":false,showcheck:true,"classes":"ico-user"},
					|	{id:"user4","text":"张学友","hasChildren":false,showcheck:true,"classes":"ico-user"}
					|],"complete":true},
					|{id:"dept3","text":"生产管理部","hasChildren":true,showcheck:true,isexpand:true,"classes":"","ChildNodes":[
					|	{id:"user5","text":"周润发","hasChildren":false,showcheck:true,"classes":"ico-user"},
					|	{id:"user6","text":"周星驰","hasChildren":false,showcheck:true,"classes":"ico-user"},
					|	{id:"user7","text":"梁朝伟","hasChildren":false,showcheck:true,"classes":"ico-user"}
					|],"complete":true}
					|];
					|var option3 ={
					|	data: treedata3,
					|	showcheck:true,		
					|	//cascadecheck: true,	//上下级联选中 默认为Tree
					|	theme:"xe-tree-arrows", 
					|	onnodeclick: function(node){node.expand();} 
					|};
					|new xjTree("tree3",option3);
		div.span4	
			div#tree3.tree_container
			div.toolbar.alert.alert-info
				div.tip 操作
				div
					button#btnGetCheckItems.btn(type="button") 获取选中项
					button#btnGetCurItem.btn(type="button") 获取当前项
					button#btnToggleNode.btn(type="button") 展开/收缩第二个节点
					button#btnCheckItem.btn(type="button") 选中周润发
					button#btnCheckAll.btn(type="button") 全选
					button#btnUnCheckAll.btn(type="button") 全不选

block jscontent
	script(src="/js/plugin/xjTree.js",type="text/javascript")
	script.
		//------------------示例1代码-------------------------------------------------------------------
		function generateChildNodes(id,text,hasChild,classes,pitem,count)
		{
			for(var i=0,l=10;i<l;i++)
			{
				var item = {id:id+i,"text":text+i,"hasChildren":hasChild,"classes":classes,"ChildNodes":[],"complete":true};
				if(hasChild)
				{
					generateChildNodes(item.id,"生成的子节点",false,"",item.ChildNodes,10);
				}
				pitem.push(item);
			}
		}
		var treedata1 = [];	
		generateChildNodes("t1","生成的分组",true,"",treedata1,10);		
		var option1 = { 
			data: treedata1,
			theme:"xe-tree-arrows", 
			onnodeclick: function(node){node.expand();} 
		};
		new xjTree("tree1",option1);

		$("div.toolbar input[type='radio']").each(function(i){
			$(this).click(function(){
				if(this.checked){
					changeTheme("tree1",this.value);
				}
			});
		});
		//切换样式的方法
		function changeTheme(treeId,newTheme){
			$("#"+treeId +" ul.xe-tree-root")[0].className="xe-tree-root "+newTheme; //保留示例中的tree_container,实际中可能不需要，实际使用中一般也不换样式
		}
		//------------------示例2代码-------------------------------------------------------------------
		var treedata2=[
			{id:"root0","text":"根节点1","hasChildren":true,"classes":"ico-home","ChildNodes":[],"complete":false},
			{id:"root1","text":"根节点2-无图标","hasChildren":true,"classes":"xe-tree-noicon","ChildNodes":[],"complete":false},
			{id:"root2","text":"根节点3-没子节点","hasChildren":false,"classes":"ico-config","ChildNodes":[]}
		];
		var option2 ={
			data: treedata2,
			url:"/sample/querytree",
			theme:"xe-tree-arrows", 
			onnodeclick: function(node){node.expand();} 
		};
		new xjTree("tree2",option2);
		//------------------示例3代码-------------------------------------------------------------------
		var treedata3=[
			{id:"dept1","text":"信息管理部","hasChildren":true,isexpand:true,showcheck:true,"classes":"","ChildNodes":[
				{id:"user1","text":"刘德华","hasChildren":false,showcheck:true,"classes":"ico-user"},
				{id:"user2","text":"黎明","hasChildren":false,showcheck:true,"classes":"ico-user"}
			],"complete":true},
			{id:"dept2","text":"财务部","hasChildren":true,showcheck:true,isexpand:true,"classes":"","ChildNodes":[
				{id:"user3","text":"郭富城","hasChildren":false,showcheck:true,"classes":"ico-user"},
				{id:"user4","text":"张学友","hasChildren":false,showcheck:true,"classes":"ico-user"}
			],"complete":true},
			{id:"dept3","text":"生产管理部","hasChildren":true,showcheck:true,isexpand:true,"classes":"","ChildNodes":[
				{id:"user5","text":"周润发","hasChildren":false,showcheck:true,"classes":"ico-user"},
				{id:"user6","text":"周星驰","hasChildren":false,showcheck:true,"classes":"ico-user"},
				{id:"user7","text":"梁朝伟","hasChildren":false,showcheck:true,"classes":"ico-user"}
			],"complete":true}
		];
		var option3 ={
			data: treedata3,
			showcheck:true,		
			//cascadecheck: true,	//上下级联选中 默认为Tree
			theme:"xe-tree-arrows", 
			onnodeclick: function(node){node.expand();} 
		};
		var xjtree3 = new xjTree("tree3",option3);

		$("#btnGetCheckItems").click(function(e){
			var items =xjtree3.GetCheckedItems(true); //将半选计算在内
			if(items && items.length>0){
				var tmp = [] ;
				for(var i=0,l=items.length;i<l;i++){
					if(items[i].checkstate == 2){
						tmp.push(items[i].text+"(半选)");
					}
					else{
						tmp.push(items[i].text);
					}
				}
				alert("您选中了节点：\r\n"+tmp.join(","));
			}
			else{
				alert("您没有选中任何节点");
			}
		});
		$("#btnGetCurItem").click(function(e){
			var item =xjtree3.GetCurrentItem();
			if(item)
			{ 
				alert("当前节点：\r\n"+item.text);
			}
			else{
				alert("没有当前节点");
			}
		});
		$("#btnToggleNode").click(function(e){
			xjtree3.ToggleNode("dept2");
		});
		$("#btnCheckItem").click(function(e){
			xjtree3.SetItemsCheckState("user5",1,true); //选中节点id为user5的节点，并设置级联；
		});
		$("#btnCheckAll").click(function(e){
			xjtree3.CheckAll();
		});
		$("#btnUnCheckAll").click(function(e){
			xjtree3.UnCheckAll();
		});